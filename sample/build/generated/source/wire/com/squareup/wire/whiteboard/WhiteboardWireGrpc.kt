// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.squareup.wire.whiteboard.Whiteboard in com/squareup/wire/whiteboard/whiteboard.proto
package com.squareup.wire.whiteboard

import com.google.protobuf.DescriptorProtos
import com.google.protobuf.Descriptors
import com.squareup.wire.kotlin.grpcserver.MessageSinkAdapter
import com.squareup.wire.kotlin.grpcserver.MessageSourceAdapter
import com.squareup.wire.kotlin.grpcserver.WireBindableService
import com.squareup.wire.kotlin.grpcserver.WireMethodMarshaller
import io.grpc.CallOptions
import io.grpc.Channel
import io.grpc.MethodDescriptor
import io.grpc.ServerServiceDefinition
import io.grpc.ServiceDescriptor
import io.grpc.ServiceDescriptor.newBuilder
import io.grpc.stub.AbstractStub
import io.grpc.stub.ClientCalls
import io.grpc.stub.ServerCalls.asyncBidiStreamingCall
import io.grpc.stub.StreamObserver
import java.io.InputStream
import java.lang.Class
import java.lang.UnsupportedOperationException
import java.util.concurrent.ExecutorService
import kotlin.Array
import kotlin.String
import kotlin.collections.Map
import kotlin.collections.Set
import kotlin.jvm.Volatile

public object WhiteboardWireGrpc {
  public val SERVICE_NAME: String = "com.squareup.wire.whiteboard.Whiteboard"

  @Volatile
  private var serviceDescriptor: ServiceDescriptor? = null

  private val descriptorMap: Map<String, DescriptorProtos.FileDescriptorProto> = mapOf(
    "com/squareup/wire/whiteboard/whiteboard.proto" to descriptorFor(arrayOf(
      "Ci1jb20vc3F1YXJldXAvd2lyZS93aGl0ZWJvYXJkL3doaXRlYm9hcmQucHJvdG8SHGNvbS5zcXVhcmV1",
      "cC53aXJlLndoaXRlYm9hcmQiLAoFUG9pbnQSCQoBeBgBIAIoBRIJCgF5GAIgAigFEg0KBWNvbG9yGAMg",
      "AigFIp0CChFXaGl0ZWJvYXJkQ29tbWFuZBJNCglhZGRfcG9pbnQYASABKAsyOC5jb20uc3F1YXJldXAu",
      "d2lyZS53aGl0ZWJvYXJkLldoaXRlYm9hcmRDb21tYW5kLkFkZFBvaW50SAASUQoLY2xlYXJfYm9hcmQY",
      "AiABKAsyOi5jb20uc3F1YXJldXAud2lyZS53aGl0ZWJvYXJkLldoaXRlYm9hcmRDb21tYW5kLkNsZWFy",
      "Qm9hcmRIABo+CghBZGRQb2ludBIyCgVwb2ludBgBIAIoCzIjLmNvbS5zcXVhcmV1cC53aXJlLndoaXRl",
      "Ym9hcmQuUG9pbnQaDAoKQ2xlYXJCb2FyZEIYChZvbmVfd2hpdGVib2FyZF9jb21tYW5kIuMCChBXaGl0",
      "ZWJvYXJkVXBkYXRlEloKEGluaXRpYWxpc2VfYm9hcmQYASABKAsyPi5jb20uc3F1YXJldXAud2lyZS53",
      "aGl0ZWJvYXJkLldoaXRlYm9hcmRVcGRhdGUuSW5pdGlhbGlzZUJvYXJkSAASVAoNdXBkYXRlX3BvaW50",
      "cxgCIAEoCzI7LmNvbS5zcXVhcmV1cC53aXJlLndoaXRlYm9hcmQuV2hpdGVib2FyZFVwZGF0ZS5VcGRh",
      "dGVQb2ludHNIABo/Cg9Jbml0aWFsaXNlQm9hcmQSDQoFd2lkdGgYASACKAUSDgoGaGVpZ2h0GAIgAigF",
      "Eg0KBWNvbG9yGAMgAigFGkMKDFVwZGF0ZVBvaW50cxIzCgZwb2ludHMYASADKAsyIy5jb20uc3F1YXJl",
      "dXAud2lyZS53aGl0ZWJvYXJkLlBvaW50QhcKFW9uZV93aGl0ZWJvYXJkX3VwZGF0ZTJ/CgpXaGl0ZWJv",
      "YXJkEnEKCldoaXRlYm9hcmQSLy5jb20uc3F1YXJldXAud2lyZS53aGl0ZWJvYXJkLldoaXRlYm9hcmRD",
      "b21tYW5kGi4uY29tLnNxdWFyZXVwLndpcmUud2hpdGVib2FyZC5XaGl0ZWJvYXJkVXBkYXRlKAEwAUIe",
      "Chxjb20uc3F1YXJldXAud2lyZS53aGl0ZWJvYXJk",
    )),
  )


  @Volatile
  private var getWhiteboardMethod: MethodDescriptor<WhiteboardCommand, WhiteboardUpdate>? = null

  private fun descriptorFor(`data`: Array<String>): DescriptorProtos.FileDescriptorProto {
    val str = data.fold(java.lang.StringBuilder()) { b, s -> b.append(s) }.toString()
    val bytes = java.util.Base64.getDecoder().decode(str)
    return DescriptorProtos.FileDescriptorProto.parseFrom(bytes)
  }

  private fun fileDescriptor(path: String, visited: Set<String>): Descriptors.FileDescriptor {
    val proto = descriptorMap[path]!!
    val deps = proto.dependencyList.filter { !visited.contains(it) }.map { fileDescriptor(it,
        visited + path) }
    return Descriptors.FileDescriptor.buildFrom(proto, deps.toTypedArray())
  }

  public fun getServiceDescriptor(): ServiceDescriptor? {
    var result = serviceDescriptor
    if (result == null) {
      synchronized(WhiteboardWireGrpc::class) {
        result = serviceDescriptor
        if (result == null) {
          result = newBuilder(SERVICE_NAME)
          .addMethod(getWhiteboardMethod())
          .setSchemaDescriptor(io.grpc.protobuf.ProtoFileDescriptorSupplier {
                fileDescriptor("com/squareup/wire/whiteboard/whiteboard.proto", emptySet())
              })
          .build()
          serviceDescriptor = result
        }
      }
    }
    return result
  }

  public fun getWhiteboardMethod(): MethodDescriptor<WhiteboardCommand, WhiteboardUpdate> {
    var result: MethodDescriptor<WhiteboardCommand, WhiteboardUpdate>? = getWhiteboardMethod
    if (result == null) {
      synchronized(WhiteboardWireGrpc::class) {
        result = getWhiteboardMethod
        if (result == null) {
          getWhiteboardMethod = MethodDescriptor.newBuilder<WhiteboardCommand, WhiteboardUpdate>()
            .setType(MethodDescriptor.MethodType.BIDI_STREAMING)
            .setFullMethodName(
              MethodDescriptor.generateFullMethodName(
                "com.squareup.wire.whiteboard.Whiteboard", "Whiteboard"
              )
            )
            .setSampledToLocalTracing(true)
            .setRequestMarshaller(WhiteboardImplBase.WhiteboardCommandMarshaller())
            .setResponseMarshaller(WhiteboardImplBase.WhiteboardUpdateMarshaller())
            .build()
        }
      }
    }
    return getWhiteboardMethod!!
  }

  public fun newStub(channel: Channel): WhiteboardStub = WhiteboardStub(channel)

  public fun newBlockingStub(channel: Channel): WhiteboardBlockingStub =
      WhiteboardBlockingStub(channel)

  public abstract class WhiteboardImplBase : WireBindableService {
    public open fun Whiteboard(response: StreamObserver<WhiteboardUpdate>):
        StreamObserver<WhiteboardCommand> = throw UnsupportedOperationException()

    public override fun bindService(): ServerServiceDefinition =
        ServerServiceDefinition.builder(getServiceDescriptor()).addMethod(
              getWhiteboardMethod(),
              asyncBidiStreamingCall(this@WhiteboardImplBase::Whiteboard)
            ).build()

    public class WhiteboardCommandMarshaller : WireMethodMarshaller<WhiteboardCommand> {
      public override fun stream(`value`: WhiteboardCommand): InputStream =
          WhiteboardCommand.ADAPTER.encode(value).inputStream()

      public override fun marshalledClass(): Class<WhiteboardCommand> =
          WhiteboardCommand::class.java

      public override fun parse(stream: InputStream): WhiteboardCommand =
          WhiteboardCommand.ADAPTER.decode(stream)
    }

    public class WhiteboardUpdateMarshaller : WireMethodMarshaller<WhiteboardUpdate> {
      public override fun stream(`value`: WhiteboardUpdate): InputStream =
          WhiteboardUpdate.ADAPTER.encode(value).inputStream()

      public override fun marshalledClass(): Class<WhiteboardUpdate> = WhiteboardUpdate::class.java

      public override fun parse(stream: InputStream): WhiteboardUpdate =
          WhiteboardUpdate.ADAPTER.decode(stream)
    }
  }

  public class BindableAdapter(
    private val streamExecutor: ExecutorService,
    private val Whiteboard: () -> WhiteboardWhiteboardBlockingServer,
  ) : WhiteboardImplBase() {
    public override fun Whiteboard(response: StreamObserver<WhiteboardUpdate>):
        StreamObserver<WhiteboardCommand> {
      val requestStream = MessageSourceAdapter<WhiteboardCommand>()
      streamExecutor.submit {
        Whiteboard().Whiteboard(requestStream, MessageSinkAdapter(response))
      }
      return requestStream
    }
  }

  public class WhiteboardStub : AbstractStub<WhiteboardStub> {
    internal constructor(channel: Channel) : super(channel)

    internal constructor(channel: Channel, callOptions: CallOptions) : super(channel, callOptions)

    public override fun build(channel: Channel, callOptions: CallOptions) = WhiteboardStub(channel,
        callOptions)

    public fun Whiteboard(response: StreamObserver<WhiteboardUpdate>):
        StreamObserver<WhiteboardCommand> =
        ClientCalls.asyncBidiStreamingCall(channel.newCall(getWhiteboardMethod(), callOptions),
        response)
  }

  public class WhiteboardBlockingStub : AbstractStub<WhiteboardStub> {
    internal constructor(channel: Channel) : super(channel)

    internal constructor(channel: Channel, callOptions: CallOptions) : super(channel, callOptions)

    public override fun build(channel: Channel, callOptions: CallOptions) = WhiteboardStub(channel,
        callOptions)
  }
}
